#ifndef ROBOMASTER_PROTOCOL_H
#define ROBOMASTER_PROTOCOL_H

#include "board.h"

#define HEADER_SOF 0xA5
#define REF_PROTOCOL_FRAME_MAX_SIZE 128

#define REF_PROTOCOL_HEADER_SIZE sizeof(frame_header_struct_t)
#define REF_PROTOCOL_CMD_SIZE 2
#define REF_PROTOCOL_CRC16_SIZE 2
#define REF_HEADER_CRC_LEN (REF_PROTOCOL_HEADER_SIZE + REF_PROTOCOL_CRC16_SIZE)
#define REF_HEADER_CRC_CMDID_LEN (REF_PROTOCOL_HEADER_SIZE + REF_PROTOCOL_CRC16_SIZE + sizeof(uint16_t))
#define REF_HEADER_CMDID_LEN (REF_PROTOCOL_HEADER_SIZE + sizeof(uint16_t))

#pragma pack(push, 1)

typedef enum {
  GAME_STATE_CMD_ID = 0x0001,
  GAME_RESULT_CMD_ID = 0x0002,
  GAME_ROBOT_HP_CMD_ID = 0x0003,

  FIELD_EVENTS_CMD_ID = 0x0101,
  SUPPLY_PROJECTILE_ACTION_CMD_ID = 0x0102,
  REFEREE_WARNING_CMD_ID = 0x0103,
  DART_REMAINING_TIME_CMD_ID = 0x0104,

  ROBOT_STATE_CMD_ID = 0x0201,
  POWER_HEAT_DATA_CMD_ID = 0x0202,
  ROBOT_POS_CMD_ID = 0x0203,
  BUFF_CMD_ID = 0x0204,
  AERIAL_ROBOT_ENERGY_CMD_ID = 0x0205,
  ROBOT_HURT_CMD_ID = 0x0206,
  SHOOT_DATA_CMD_ID = 0x0207,
  BULLET_REMAINING_CMD_ID = 0x0208,
  RFID_STATUS_CMD_ID = 0x0209,
  DART_CLIENT_CMD_ID = 0x020A,

  STUDENT_INTERACTIVE_DATA_CMD_ID = 0x0301,
  // ROBOT_INTERACTIVE_DATE_ONE,
  // CLIENT_CUSTOM_GRAPHIC_DELETE,
  // GRAPHIC_DATE_STRUCT,
  // CLIENT_CUSTOM_GRAPHIC_SINGLE,
  // CLIENT_CUSTOM_GRAPHIC_DOUBLE,
  // CLIENT_CUSTOM_GRAPHIC_FIVE,
  // CLIENT_CUSTOM_GRAPHIC_SEVEN,
  // CLIENT_CUSTOM_CHARACTER,

  ROBOT_INTERACTIVE_DATE_TWO_CMD_ID = 0x0302,
  ROBOT_COMMAND_ONE_CMD_ID = 0x0303,
  ROBOT_COMMAND_TWO_CMD_ID = 0x0304,
  CLIENT_MAP_COMMAND_CMD_ID = 0x0305,
} referee_cmd_id_t;
typedef struct
{
  uint8_t SOF;
  uint16_t data_length;
  uint8_t seq;
  uint8_t CRC8;
} frame_header_struct_t;

typedef enum {
  STEP_HEADER_SOF = 0,
  STEP_LENGTH_LOW = 1,
  STEP_LENGTH_HIGH = 2,
  STEP_FRAME_SEQ = 3,
  STEP_HEADER_CRC8 = 4,
  STEP_DATA_CRC16 = 5,
} unpack_step_e;

typedef struct
{
  frame_header_struct_t *p_header;
  uint16_t data_len;
  uint8_t protocol_packet[REF_PROTOCOL_FRAME_MAX_SIZE];
  unpack_step_e unpack_step;
  uint16_t index;
} unpack_data_t;

#pragma pack(pop)

#endif // ROBOMASTER_PROTOCOL_H
